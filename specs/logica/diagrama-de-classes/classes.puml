@startuml

abstract class UsuarioDoSistema {
    - idUsuario: int
    - email: String
    # senha: String
}

class Administrador extends UsuarioDoSistema {
    + configurarPermissoes(usuario: UsuarioDoSistema) -> void
}

class UsuarioComum extends UsuarioDoSistema {
    - nome: String
    + criarConta(nome: String, email: String, senha: String) -> UsuarioComum
    + editarUsuario(id: int, novoNome: String) -> void
    + deletarUsuario(id: int) -> void
    + participarComunidades(comunidadeId: int): void
    + avaliarProfissional(idUsuario: int, nota: int, avaliacao: String) -> void
    + enviarMensagens(mensagem: String, destinatarioId: int): void
}

class Profissional extends UsuarioComum {
    - especialidade: String
    - avaliacao: int
}

class Notificacao {
    - id: int
    - mensagem: String
    - data: Date
    + enviarNotificacoes(mensagem: String) -> Notificacao
}

class Perfil {
    - objetivos: List<String>
    - atividades: List<Atividade>
    + criarPerfil(objetivos: List<String>, atividades: List<Atividade>) -> Perfil
    + adicionarObjetivo(objetivo: String) -> void
    + adicionarAtividade(atividade: Atividade) -> void
    + atualizarPerfil(objetivos: List<String>, atividades: List<Atividade>) -> void
}

class Atividade {
    - id: int
    - nome: String
    - duracao: int
    - intensidade: String
    + criarAtividade(nome: String, data: date, duracao: int, intensidade: String) -> Atividade
    + deletarAtividade(atividadeId: int) -> void
    + editarAtividade(atividadeId: int, nome: String, data: date, duracao: int, intensidade: String) -> void
}

class PlanoTreino {
    - id: int
    - nome: String
    - atividades: List<Atividade>
    + criarPlano(nome: String, atividades: List<Atividade>) -> PlanoTreino
    + atualizarPlano(nome: String, atividades: List<Atividade>) -> void
    + excluirPlano() -> void
}

class Progresso {
    - usuario: Usuario
    - atividadesCompletas: List<Atividade>
    + acompanharProgresso() -> Progresso
    + atualizarProgresso(atividades: List<Atividade>) -> void
}

class Conteudo {
    - id: int
    - conteudo: String
    - autor: Usuario
    + criarConteudo(conteudo: String) -> Conteudo
    + atualizarPost(conteudo: String) -> void
    + excluirPost() -> void
}

class Comunidade {
    - id: int
    - nome: String
    - descricao: String
    - membros: List<Usuario>
    + criarComunidade(nome: String, data: date, descricao: String) -> Comunidade
    + deletarComunidade(comunidadeId: int) -> void
    + editarComunidade(comunidadeId: int, nome: String, data: date, descricao: String) -> void
    + adicionarMembro(usuario: Usuario) -> void
    + removerMembro(usuario: Usuario) -> void
}

class Desafio {
    - id: int
    - nome: String
    - data: date
    - descricao: String
    - participantes: List<Usuario>
    + criarDesafio(nome: String, data: date, descricao: String) -> Desafio
    + editarDesafio(nome: String, data: date, descricao: String) -> void
    + deletarDesafio(desafioId: int) -> void
    + adicionarParticipante(usuario: Usuario) -> void
    + removerParticipante(usuario: Usuario) -> void
}

class Evento {
    - id: int
    - nome: String
    - data: date
    - descricao: String
    + criarEvento(nome: String, data: date, descricao: String) -> Evento
    + deletarEvento(eventoId: int) -> void
    + editarEvento(eventoId: int, nome: String, data: date, descricao: String) -> void
    + adicionarParticipante(usuario: Usuario) -> void
    + removerParticipante(usuario: Usuario) -> void
}

class Anuncio {
    - id: int
    - conteudo: String
    - valor: double
    - duracao: int
    + criarAnuncio(anuncio: String, valor: int, duracao: int) -> Anuncio
    + atualizarAnuncio(anuncio: String, valor: int, duracao: int) -> void
    + aprovarAnuncio(anuncio: Anuncio) -> void
    + excluirAnuncio() -> void
}

UsuarioComum "1" -- "1" Perfil: possui
Perfil "1" -- "1" Progresso: acompanha
Perfil "1" -- "0..*" Atividade: possui
Perfil "1" -- "0..*" PlanoTreino: possui
UsuarioComum "1" -- "0..*" Conteudo: possui
UsuarioComum "0..*" -- "0..*" Comunidade: participa de
UsuarioComum "0..*" -- "0..*" Desafio: participa de
UsuarioComum "0..*" -- "0..*" Evento: participa de
Profissional "1" -- "0..*" Anuncio: possui
UsuarioDoSistema "0..*" -- "0..*" Notificacao: recebe
Administrador "1" -- "0..*" Notificacao: envia

@enduml